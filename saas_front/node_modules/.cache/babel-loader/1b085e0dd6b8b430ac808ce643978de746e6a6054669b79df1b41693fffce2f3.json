{"ast":null,"code":"import axios from 'axios';\nimport dayjs from 'dayjs';\nimport { Message } from 'element-ui';\nexport default {\n  data() {\n    return {\n      tableHeaderClassName: 'custom-table-header',\n      // 自定义的表头样式类名\n      list: [],\n      addDialogFormVisible: false,\n      editDialogFormVisible: false,\n      accountingSubjectList: '',\n      sels: '',\n      userFormData: {\n        date: dayjs().format('YYYY-MM-DD '),\n        id: '',\n        number: '',\n        name: '',\n        accountingSubject: '',\n        balance: '',\n        bankAccount: ''\n      },\n      pageno: 1,\n      pagesize: 4,\n      total: 0,\n      params: {},\n      bookId: 6\n    };\n  },\n  created() {\n    this.bookId = localStorage.getItem('bookID'), this.getAccountingSubject();\n    this.getList();\n  },\n  methods: {\n    // 查询全部的会计科目\n    async getAccountingSubject() {\n      const res = await axios({\n        url: \"http://localhost:8081/accounting/findAll\",\n        method: \"get\",\n        params: {\n          bookId: this.bookId\n          //bookId:6,\n        }\n      });\n      this.accountingSubjectList = res.data.data;\n    },\n    async getList() {\n      const res = await axios({\n        url: \"http://localhost:8081/subjectAccount/page\",\n        method: \"get\",\n        params: {\n          page: this.pageno,\n          limit: this.pagesize\n          //bookId:this.bookId,\n        }\n      });\n      this.list = res.data.data.map(item => {\n        return {\n          ...item,\n          createTime: dayjs(item.createTime).format('YYYY-MM-DD '),\n          updateTime: dayjs(item.updateTime).format('YYYY-MM-DD ')\n        };\n      });\n      this.total = res.data.count;\n    },\n    // 页码改变\n    pagechange(pageno) {\n      // 条件改变\n      this.pageno = pageno;\n      // 重新请求数据\n      this.getList();\n    },\n    // 打开新增弹窗，\n    addOpen() {\n      // 打开弹窗\n      this.addDialogFormVisible = true;\n      // 记录状态\n      this.actionType = 'add';\n      // 重置userFormData\n      this.userFormData = {\n        number: '',\n        name: '',\n        accountingSubject: '',\n        balance: '',\n        bankAccount: ''\n      };\n    },\n    //修改弹窗\n    edit(row) {\n      // 打开弹窗\n      this.editDialogFormVisible = true;\n      console.log(row);\n      // 数据回显\n      this.userFormData.name = row.name;\n      this.userFormData.accountingSubject = row.accountingSubject;\n      this.bankAccount = row.bankAccount;\n      // 记录id\n      this.id = row.id;\n      // 记录动作\n      this.actionType = 'edit';\n    },\n    //新增或修改固定资产\n    async submit() {\n      // 拷贝userFormData到data\n      const data = {\n        ...this.userFormData\n      };\n      if (this.actionType === 'add') {\n        const res = await axios({\n          url: 'http://localhost:8081/subjectAccount/add',\n          method: 'post',\n          data: data\n        });\n        this.addDialogFormVisible = false;\n        this.getList();\n      }\n    },\n    //修改\n    async commit() {\n      // 拷贝userFormData到data\n      const data = {\n        ...this.userFormData\n      };\n      // 修改的时候需要把id带过去\n      if (this.actionType === 'edit') {\n        data.id = this.id;\n        const res = await axios({\n          url: 'http://localhost:8081/subjectAccount/update',\n          method: 'post',\n          data: data\n        });\n        this.editDialogFormVisible = false;\n        this.getList();\n      }\n    },\n    //删除\n    async removeFixedasset(id) {\n      const res = await axios({\n        url: 'http://localhost:8081/subjectAccount/delete',\n        method: 'get',\n        // data一定是个对象，不能直接把id给data，把id变成一个对象给到data\n        params: {\n          id: id\n        }\n      });\n      this.getList();\n    },\n    //获取选中的值\n    handleSelectionChange(sels) {\n      this.sels = sels;\n      console.log(\"选中的值\", sels.map(item => item.id));\n    },\n    //批量删除\n    async batch() {\n      this.$confirm('此操作将永久删除, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        let ids = this.sels.map(item => item.id);\n        console.log(\"ids为:\", ids);\n        removeFixedasset({\n          ids: id\n        }).then(res => {\n          if (res.code == \"0\") {\n            this.$message({\n              type: 'success',\n              message: '删除成功!'\n            });\n          }\n        });\n        this.getList();\n      });\n      //    .catch(() => {\n      //     this.$message({\n      //             type: 'info',\n      //             message: '已取消删除'\n      //     });          \n      //   });\n    }\n  }\n};","map":{"version":3,"names":["axios","dayjs","Message","data","tableHeaderClassName","list","addDialogFormVisible","editDialogFormVisible","accountingSubjectList","sels","userFormData","date","format","id","number","name","accountingSubject","balance","bankAccount","pageno","pagesize","total","params","bookId","created","localStorage","getItem","getAccountingSubject","getList","methods","res","url","method","page","limit","map","item","createTime","updateTime","count","pagechange","addOpen","actionType","edit","row","console","log","submit","commit","removeFixedasset","handleSelectionChange","batch","$confirm","confirmButtonText","cancelButtonText","type","then","ids","code","$message","message"],"sources":["src/views/bookkeeping/SubjectAccount.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-card>\r\n            <el-card>\r\n                <span style=\"font-size: 18px;font-weight: bold;font-family: 'Times New Roman', Times, serif;\">账户管理</span>\r\n            </el-card>\r\n            <el-card>\r\n                <div>\r\n                    <el-form :inline=\"true\">\r\n                        <!-- 新增按钮 -->\r\n                       <el-form-item>\r\n                            <el-button type=\"primary\" @click=\"addOpen\">新增</el-button>\r\n                       </el-form-item>\r\n\r\n                        <!-- 删除按钮 -->\r\n                       <el-form-item>\r\n                            <el-button type=\"primary\" @click=\"batch\">删除</el-button>\r\n                       </el-form-item>\r\n                    </el-form>\r\n                </div>\r\n                <el-table :data=\"list\" style=\"width: 100%;margin-top: 15px;\" :header-row-class-name=\"tableHeaderClassName\" @selection-change=\"handleSelectionChange\">\r\n                    <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n                    <el-table-column prop=\"id\" label=\"编号\" align=\"center\"> </el-table-column>\r\n                    <el-table-column prop=\"number\" label=\"账户编号\" align=\"center\"> </el-table-column>\r\n                    <el-table-column prop=\"name\" label=\"账户名称\" align=\"center\"></el-table-column>\r\n                    <el-table-column prop=\"accountingSubject\" label=\"会计科目\" align=\"center\"></el-table-column>\r\n                    <el-table-column prop=\"balance\" label=\"余额\" align=\"center\"></el-table-column>\r\n                    <el-table-column prop=\"bankAccount\" label=\"银行卡号\" align=\"center\"></el-table-column>\r\n                    <el-table-column fixed=\"right\" label=\"操作\" width=\"250\" align=\"center\">\r\n                        <template slot-scope=\"{row,$index}\">\r\n                            <el-button  type=\"danger\" icon=\"el-icon-delete\" circle @click=\"removeFixedasset(row.id)\"></el-button>\r\n                            <el-button type=\"primary\" icon=\"el-icon-edit\" circle @click=\"edit(row)\"></el-button>\r\n                        </template>\r\n                    </el-table-column>\r\n                </el-table>\r\n\r\n                <!-- 分页组件 -->\r\n                <el-pagination @current-change=\"pagechange\" background layout=\"prev, pager, next\" :total=\"total\"\r\n                    :page-size=\"pagesize\" style=\"text-align: center; margin-top: 10px;\">\r\n                </el-pagination>\r\n            </el-card>\r\n\r\n            <!-- 新增区域 -->\r\n            <el-dialog :title=\"'新增账户'\" :visible.sync=\"addDialogFormVisible\">\r\n            <el-form :model=\"userFormData\" class=\"demo-form-inline\" label-width=\"120px\">\r\n\r\n                <el-form-item label=\"账户编码\">\r\n                <el-input v-model=\"userFormData.number\" placeholder=\"账户编码\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item label=\"账户名称\">\r\n                <el-input v-model=\"userFormData.name\" placeholder=\"账户名称\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item label=\"会计科目\">\r\n                    <el-select v-model=\"userFormData.accountingSubject\" class=\"filter-item\" placeholder=\"请选择\">\r\n                        <el-option v-for=\"(accountingSubject, index) in accountingSubjectList\" :label=\"accountingSubject.accountingAccount\" :value=\"accountingSubject.accountingAccount\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n\r\n                <el-form-item label=\"初始余额\">\r\n                <el-input v-model=\"userFormData.balance\" placeholder=\"初始余额\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item style=\"margin-top: 20px;\">\r\n                <el-button @click=\"submit\" style=\"margin-left: 400px;\">提交</el-button>\r\n                </el-form-item>\r\n\r\n            </el-form>\r\n            </el-dialog>\r\n\r\n            <!-- 修改区域 -->\r\n            <el-dialog :title=\"'修改角色'\" :visible.sync=\"editDialogFormVisible\">\r\n            <el-form :model=\"userFormData\" class=\"demo-form-inline\" label-width=\"120px\">\r\n\r\n                <el-form-item label=\"账户名称\">\r\n                <el-input v-model=\"userFormData.name\" placeholder=\"账户名称\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item label=\"会计科目\">\r\n                    <el-select v-model=\"userFormData.accountingSubject\" class=\"filter-item\" placeholder=\"请选择\">\r\n                        <el-option v-for=\"(accountingSubject, index) in accountingSubjectList\" :label=\"accountingSubject.accountingAccount\" :value=\"accountingSubject.accountingAccount\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n\r\n                <el-form-item style=\"margin-top: 20px;\">\r\n                <el-button @click=\"commit\" style=\"margin-left: 400px;\">提交</el-button>\r\n                </el-form-item>\r\n\r\n            </el-form>\r\n            </el-dialog>\r\n\r\n        </el-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport dayjs from 'dayjs';\r\nimport { Message } from 'element-ui'\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            tableHeaderClassName: 'custom-table-header',// 自定义的表头样式类名\r\n            list: [],\r\n            addDialogFormVisible:false,\r\n            editDialogFormVisible:false,\r\n            accountingSubjectList:'',\r\n            sels:'',\r\n            userFormData: {\r\n                date: dayjs().format('YYYY-MM-DD '),\r\n                id:'',\r\n                number:'',\r\n                name: '',\r\n                accountingSubject: '',\r\n                balance:'',\r\n                bankAccount: ''\r\n            },\r\n            pageno: 1,\r\n            pagesize: 4,\r\n            total: 0,\r\n            params: {\r\n            },\r\n            bookId:6\r\n        }\r\n    },\r\n    created() {\r\n        this.bookId = localStorage.getItem('bookID'),\r\n        this.getAccountingSubject()\r\n        this.getList()\r\n    },\r\n    methods: {\r\n        // 查询全部的会计科目\r\n         async getAccountingSubject(){\r\n            const res = await axios({\r\n                url:\"http://localhost:8081/accounting/findAll\",\r\n                method:\"get\",\r\n                params:{\r\n                    bookId:this.bookId,\r\n                    //bookId:6,\r\n                }\r\n            });\r\n            this.accountingSubjectList=res.data.data\r\n         },\r\n        async getList() {\r\n            const res = await axios({\r\n                url: \"http://localhost:8081/subjectAccount/page\",\r\n                method: \"get\",\r\n                params: {\r\n                    page: this.pageno,\r\n                    limit: this.pagesize,\r\n                    //bookId:this.bookId,\r\n                }\r\n            });\r\n            this.list = res.data.data.map(item => {\r\n                return {\r\n                    ...item,\r\n                    createTime: dayjs(item.createTime).format('YYYY-MM-DD '),\r\n                    updateTime: dayjs(item.updateTime).format('YYYY-MM-DD ')\r\n                };\r\n            });\r\n            this.total = res.data.count;\r\n        },\r\n        // 页码改变\r\n        pagechange(pageno) {\r\n            // 条件改变\r\n            this.pageno = pageno\r\n            // 重新请求数据\r\n            this.getList()\r\n        },\r\n        // 打开新增弹窗，\r\n        addOpen() {\r\n        // 打开弹窗\r\n        this.addDialogFormVisible = true\r\n        // 记录状态\r\n        this.actionType = 'add'\r\n        // 重置userFormData\r\n        this.userFormData = {\r\n            number: '',\r\n            name: '',\r\n            accountingSubject: '',\r\n            balance:'',\r\n            bankAccount: ''\r\n        }\r\n        },\r\n\r\n    //修改弹窗\r\n    edit(row) {\r\n      // 打开弹窗\r\n      this.editDialogFormVisible = true\r\n      console.log(row)\r\n      // 数据回显\r\n      this.userFormData.name = row.name\r\n      this.userFormData.accountingSubject = row.accountingSubject\r\n      this.bankAccount=row.bankAccount\r\n      // 记录id\r\n      this.id = row.id\r\n      // 记录动作\r\n      this.actionType = 'edit'\r\n    },\r\n    //新增或修改固定资产\r\n    async submit() { \r\n        // 拷贝userFormData到data\r\n        const data = { ...this.userFormData }\r\n        if (this.actionType === 'add') {\r\n            const res = await axios({\r\n            url: 'http://localhost:8081/subjectAccount/add',\r\n            method: 'post',\r\n            data: data\r\n        })\r\n        this.addDialogFormVisible = false\r\n        this.getList()\r\n      }\r\n    },\r\n    //修改\r\n    async commit() {\r\n      // 拷贝userFormData到data\r\n      const data = { ...this.userFormData }\r\n      // 修改的时候需要把id带过去\r\n      if (this.actionType === 'edit') {\r\n        data.id = this.id\r\n        const res = await axios({\r\n        url: 'http://localhost:8081/subjectAccount/update',\r\n        method: 'post',\r\n        data: data\r\n      })\r\n      this.editDialogFormVisible = false\r\n      this.getList()\r\n      }       \r\n    },\r\n    //删除\r\n    async removeFixedasset(id) {\r\n\r\n      const res = await axios({\r\n        url: 'http://localhost:8081/subjectAccount/delete',\r\n        method: 'get',\r\n        // data一定是个对象，不能直接把id给data，把id变成一个对象给到data\r\n        params: {\r\n          id: id\r\n        }\r\n      })\r\n      this.getList()\r\n    },\r\n    //获取选中的值\r\n    handleSelectionChange(sels) {\r\n        this.sels = sels;\r\n        console.log(\"选中的值\",sels.map((item) => item.id));\r\n    },\r\n    //批量删除\r\n    async batch() {\r\n        this.$confirm('此操作将永久删除, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          let ids = this.sels.map((item) => item.id);\r\n          console.log(\"ids为:\",ids)\r\n          removeFixedasset({ids:id}).then((res) => {\r\n            if (res.code == \"0\") {\r\n            this.$message({\r\n                type: 'success',\r\n                message: '删除成功!'\r\n            });\r\n            }\r\n           });\r\n          this.getList()\r\n       })\r\n    //    .catch(() => {\r\n    //     this.$message({\r\n    //             type: 'info',\r\n    //             message: '已取消删除'\r\n    //     });          \r\n    //   });\r\n      }\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep .el-input.is-disabled .el-input__inner {\r\n    background-color: #fff;\r\n    text-align: center;\r\n}\r\n\r\n.flex-container {\r\n    display: flex;\r\n}\r\n\r\n.charge-header {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.charge-header>div {\r\n    display: inline-block;\r\n    margin-right: 15px;\r\n}\r\n\r\n/* 修改标题行的颜色 */\r\n::v-deep .el-dialog__header {\r\n    background-color: rgb(243, 247, 249);\r\n    /* 替换为你想要的背景颜色值 */\r\n    color: #000000;\r\n    /* 替换为你想要的文字颜色值 */\r\n}\r\n\r\n::v-deep .custom-table-header th {\r\n    background-color: rgb(249, 251, 252);\r\n    /* 替换为你想要的背景颜色值 */\r\n    color: #000000;\r\n    /* 替换为你想要的文字颜色值 */\r\n}\r\n\r\n.button-group {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    /* 将按钮平均分布在弹窗底部 */\r\n    margin-top: 20px;\r\n    /* 为按钮组设置上边距，以调整按钮与输入框的间隔 */\r\n    margin-right: 80px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}